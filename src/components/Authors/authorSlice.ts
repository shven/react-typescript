import { createSelector } from 'reselect';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import type { RootState } from '../../app/store';
import type { IAddAuthorResponse, IAuthorsResponse, IAuthor, IAuthorState } from '../../types';
import { apiUrl } from '../../constants';

const initialState: IAuthorState = {
    entities: {},
    status: 'idle'
};

export const fetchAuthorsAsync = createAsyncThunk('authors/fetchAll', async (): Promise<IAuthorsResponse> => {
    const response = await fetch(`${apiUrl}/authors/all`);
    return await response.json();
});

export const addAuthorsAsync = createAsyncThunk('authors/fetchAdd', async (name: string): Promise<IAddAuthorResponse> => {
    const response = await fetch(`${apiUrl}/authors/add`, {
        method: 'POST',
        body: JSON.stringify({
            name
        }),
        headers: { Authorization: localStorage.getItem('token') || '', 'Content-Type': 'application/json' }
    }); // @todo get token from user state
    return await response.json();
});

export const authorSlice = createSlice({
    name: 'authors',
    initialState,
    reducers: {
        addAuthor: (state, action: PayloadAction<IAuthor>) => {
            state.entities[action.payload.id] = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            // fetch all
            .addCase(fetchAuthorsAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchAuthorsAsync.fulfilled, (state, action) => {
                state.status = 'idle';

                if (action.payload.successful && action.payload.result) {
                    const courses: IAuthor[] = action.payload.result;
                    const coursesWithKey = Object.fromEntries(courses.map((course) => [course.id, course]));

                    state.entities = { ...state.entities, ...coursesWithKey };
                }
            })
            .addCase(fetchAuthorsAsync.rejected, (state) => {
                state.status = 'failed';
            })
            // add
            .addCase(addAuthorsAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(addAuthorsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                if (action.payload.successful && action.payload.result?.id) {
                    state.entities = { ...state.entities, ...{ [action.payload.result.id]: action.payload.result } };
                }
            })
            .addCase(addAuthorsAsync.rejected, (state) => {
                state.status = 'failed';
            });
    }
});

export const { addAuthor } = authorSlice.actions;

export const selectAuthorEntities = (state: RootState) => Object.values(state.authors.entities);

export const selectAuthorById = (state: RootState, id: string) => state.authors.entities[id];

export const selectAuthorIds = (state: RootState) => Object.keys(state.authors.entities);

//export const selectTodoIdsReversed = (state: RootState) => Object.keys(state.todos.entities).reverse();
export const selectCourseIdsReversed = createSelector(selectAuthorIds, (selectTodoIds) => selectTodoIds.reverse());

export default authorSlice.reducer;
