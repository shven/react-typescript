import { createSelector } from 'reselect';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import type { RootState } from '../../app/store';
import type { IAddCourseResponse, IDeleteCourseResponse, ICourse, ICourseEntities, ICoursesState } from '../../types';
import { apiUrl } from '../../constants';

const initialState: ICoursesState = {
    entities: {},
    errors: [],
    status: 'idle'
};

export const fetchCoursesAsync = createAsyncThunk('courses/fetchAll', async (): Promise<ICourseEntities> => {
    const response = await fetch(`${apiUrl}/courses/all`);
    const result = await response.json();
    // const courses = result as TCourse[]; // @todo validate response
    const courses: ICourse[] = result.result;
    return Object.fromEntries(courses.map((course) => [course.id, course]));
});
export const addCourseAsync = createAsyncThunk('courses/fetchAdd', async (course: ICourse): Promise<IAddCourseResponse> => {
    const response = await fetch(`${apiUrl}/courses/add`, {
        method: 'POST',
        body: JSON.stringify(course),
        headers: { Authorization: localStorage.getItem('token') || '', 'Content-Type': 'application/json' }
    });
    return await response.json();
});
export const deleteCourseAsync = createAsyncThunk('courses/fetchDelete', async (id: string): Promise<IDeleteCourseResponse> => {
    const response = await fetch(`${apiUrl}/courses/${id}`, {
        method: 'DELETE',
        body: JSON.stringify({ id }),
        headers: { Authorization: localStorage.getItem('token') || '', 'Content-Type': 'application/json' }
    });
    return await response.json();
});

export const courseSlice = createSlice({
    name: 'courses',
    initialState,
    reducers: {
        addCourse: (state, action: PayloadAction<ICourse>) => {
            state.entities[action.payload.id] = action.payload;
        },
        deleteCourse: (state, action: PayloadAction<ICourse>) => {
            delete state.entities[action.payload.id];
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            // fetchCourses
            .addCase(fetchCoursesAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchCoursesAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.entities = { ...state.entities, ...action.payload };
            })
            .addCase(fetchCoursesAsync.rejected, (state) => {
                state.status = 'failed';
            })
            // delete course
            .addCase(deleteCourseAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(deleteCourseAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                if (action.payload.successful && action.payload.result?.includes(action.meta.arg)) {
                    delete state.entities[action.meta.arg];
                }
            })
            .addCase(deleteCourseAsync.rejected, (state) => {
                state.status = 'failed';
            })
            // add course
            .addCase(addCourseAsync.pending, (state) => {
                state.status = 'loading';
                state.errors = [];
            })
            .addCase(addCourseAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                if (action.payload.successful && action.payload.result) {
                    const newCourse = { [action.payload.result.id]: action.payload.result };
                    state.entities = { ...state.entities, ...newCourse };
                } else if (action.payload.errors) {
                    state.errors = action.payload.errors;
                }
            })
            .addCase(addCourseAsync.rejected, (state) => {
                state.status = 'failed';
            });
    }
});

export const { addCourse, deleteCourse } = courseSlice.actions;

const selectCourseEntities = (state: ICoursesState) => state.entities;

export const selectTodos = createSelector(selectCourseEntities, (entities) => Object.values(entities));

export const selectCourseById = (state: RootState, id: string) => state.courses.entities[id];

export const selectCourseIds = (state: RootState) => Object.keys(state.courses.entities);

//export const selectTodoIdsReversed = (state: RootState) => Object.keys(state.todos.entities).reverse();
export const selectCourseIdsReversed = createSelector(selectCourseIds, (selectTodoIds) => selectTodoIds.reverse());

export const selectLastTodoId = createSelector(selectCourseIds, (ids) => ids.pop());

export default courseSlice.reducer;
